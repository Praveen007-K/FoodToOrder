// <auto-generated />
using System;
using FoodToOrderApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodToOrderApi.Migrations
{
    [DbContext(typeof(FoodToOrderWpfAdithyanContext))]
    [Migration("20240508101411_AddedNewField")]
    partial class AddedNewField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodToOrderDB.Address", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("houseno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("r_id")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("u_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("r_id");

                    b.HasIndex("u_id")
                        .IsUnique()
                        .HasFilter("[u_id] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FoodToOrderDB.Cart", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userid")
                        .IsUnique()
                        .HasFilter("[userid] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("FoodToOrderDB.CartDish", b =>
                {
                    b.Property<int?>("c_id")
                        .HasColumnType("int");

                    b.Property<int?>("d_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("c_id", "d_id");

                    b.HasIndex("d_id");

                    b.ToTable("CartDish");
                });

            modelBuilder.Entity("FoodToOrderDB.Dish", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("dName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int?>("r_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("r_id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("FoodToOrderDB.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("orderAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodToOrderDB.OrderDish", b =>
                {
                    b.Property<int?>("o_id")
                        .HasColumnType("int");

                    b.Property<int?>("d_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("o_id", "d_id");

                    b.HasIndex("d_id");

                    b.ToTable("OrderDish");
                });

            modelBuilder.Entity("FoodToOrderDB.Restaurant", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("ROpen")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("FoodToOrderDB.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FoodToOrderDB.Address", b =>
                {
                    b.HasOne("FoodToOrderDB.Restaurant", "restaurant")
                        .WithMany("arrAddress")
                        .HasForeignKey("r_id");

                    b.HasOne("FoodToOrderDB.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("FoodToOrderDB.Address", "u_id");

                    b.Navigation("User");

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("FoodToOrderDB.Cart", b =>
                {
                    b.HasOne("FoodToOrderDB.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("FoodToOrderDB.Cart", "userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodToOrderDB.CartDish", b =>
                {
                    b.HasOne("FoodToOrderDB.Cart", "Cart")
                        .WithMany("cartdish")
                        .HasForeignKey("c_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodToOrderDB.Dish", "dish")
                        .WithMany("cartdish")
                        .HasForeignKey("d_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("dish");
                });

            modelBuilder.Entity("FoodToOrderDB.Dish", b =>
                {
                    b.HasOne("FoodToOrderDB.Restaurant", "restaurant")
                        .WithMany("dishlist")
                        .HasForeignKey("r_id");

                    b.Navigation("restaurant");
                });

            modelBuilder.Entity("FoodToOrderDB.Order", b =>
                {
                    b.HasOne("FoodToOrderDB.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("userId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodToOrderDB.OrderDish", b =>
                {
                    b.HasOne("FoodToOrderDB.Dish", "dish")
                        .WithMany("orderdish")
                        .HasForeignKey("d_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodToOrderDB.Order", "order")
                        .WithMany("orderdish")
                        .HasForeignKey("o_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dish");

                    b.Navigation("order");
                });

            modelBuilder.Entity("FoodToOrderDB.Cart", b =>
                {
                    b.Navigation("cartdish");
                });

            modelBuilder.Entity("FoodToOrderDB.Dish", b =>
                {
                    b.Navigation("cartdish");

                    b.Navigation("orderdish");
                });

            modelBuilder.Entity("FoodToOrderDB.Order", b =>
                {
                    b.Navigation("orderdish");
                });

            modelBuilder.Entity("FoodToOrderDB.Restaurant", b =>
                {
                    b.Navigation("arrAddress");

                    b.Navigation("dishlist");
                });

            modelBuilder.Entity("FoodToOrderDB.User", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
